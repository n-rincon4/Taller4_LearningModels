# -*- coding: utf-8 -*-
"""Taller 4 - Robotics Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vhc_hdXfWQv0Fay0wObHC0e97nmA52bT

# Punto 2 - Reentrenamiento de YOLOv8

### Descarga y verificación del funcionamiento de YOLOv8

Primero, se prueba utilizando los comandos de YOLOv8 desde el host de Linux soportado por el Notebook de Google Colab. Se comprueba el uso de CPU y se comprueba el entrenamiento por defecto con fotos tomadas de internet.
"""

!nvidia-smi

import os
HOME = os.getcwd()
print(HOME)

!pip install ultralytics

from IPython import display
display.clear_output()
!yolo mode=checks

from ultralytics import YOLO
from IPython.display import display, Image

"""Se comprueba el funcionamiento del modelo YOLOv8 con una foto aleatoria tomada de internet."""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source="https://blog.mascotaysalud.com/wp-content/uploads/2020/09/tran-mau-tri-tam-7QjU_u2vGDs-unsplash.jpg"

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename="/content/runs/detect/predict/tran-mau-tri-tam-7QjU_u2vGDs-unsplash.jpg", height=600)

"""Se puede apreciar que YOLOv8 detecta con un cierto porcentaje de probabilidad la presencia de objetos en una imagen. En este caso, detecta acertadamente la presencia de un gato, un perro y dos sillones/sofás. Sin embargo, comete un error puesto que determina la presencia de dos perros, cuando en realidad solamente hay uno.

### Funcionamiento del servidor Python de YOLOv8

Ahora, se prueba con el servidor de Python. Efectivamente, el resultado es el mismo.
"""

model = YOLO(f"{HOME}/yolov8n.pt")
results = model.predict(source = "https://media.roboflow.com/notebooks/examples/dog.jpeg", conf=0.25)

"""### Proceso de reentrenamiento

Para realizar el reentrenamiento, se tomó un conjunto de 90 fotos de cuatro instrumentos del salón de laboratorio: un multímetro, una fuente, un osciloscopio y un generador de señales. Se tomaron aproximadamente 20 fotos de cada instrumento desde diferentes ángulos. Además, en algunas fotos se incluyeron otros instrumentos que se encontraban al lado, de forma que en una foto donde el sujeto principal es la fuente, se puede apreciar en ocasiones un poco del osciloscopio, por ejemplo.

Las fotos tomadas se pueden consultar en el repositorio de Github: https://github.com/n-rincon4/Taller4_LearningModels/tree/main/Punto%202, dentro de la carpeta "Train Data", que contiene 78 de las 90 fotos tomadas.

Se siguió el paso a paso del tutorial de subir las fotos a Roboflow y realizar el proceso de etiquetado con cuatro clases. Después de realizar el proceso de entrenamiento de YOLOv8, se descargó el dataset del proyecto de Roboflow. Posterior a la ejecución en el entorno de Jupyter se elimina la línea de código con la información del API Key por cuestiones de privacidad.
"""

!pip install roboflow

from roboflow import Roboflow
# Eliminada línea con información del API key
project = rf.workspace("universidad-de-los-andes-5lnz1").project("yolov8-retraining")
dataset = project.version(1).download("yolov8")

"""A continuación, se ejecuta el entrenamiento con el dataset descargado. Se realizan 50 épocas para el modelo. El resultado es un nuevo modelo basado en YOLOv8 que tiene las siguientes métricas:

*  **mAP:** 92.9%
*  **Precisión:** 88.3%
*  **Recall:** 77.7%
*  **Tiempo de Entrenamiento:** 6 minutos
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=train model=yolov8s.pt data={dataset.location}/data.yaml epochs=50 imgsz=800

!ls {HOME}/runs/detect/train2/

"""### Resultados del Reentrenamiento

Se extrae de los resultados generados la matriz de confusión del entrenamiento de datos. En esta se puede apreciar la probabilidad de acierto contra predicción del modelo para cada una de las clases planteadas.

De esta manera, se tienen las siguientes probabilidades:
* **Fuente:** 3/9 = 33.3%
* **Generador:** 4/9 = 44.4%
* **Multímetro:** 5/9 = 55.6%
* **Osciloscopio:** 9/9 = 100%
* **Fondos:** 1/9 = 11.1%

Adicionalmente, se tienen las probabilidades de error siguientes:
* **Fuente-Fondo:** 2/9 = 22.2%
* **Generador-Fondo:** 2/9 = 22.2%
* **Osciloscopio-Fondo:** 1/9 = 11.1%
* **Fondo-Generador:** 1/9 = 11.1%
* **Fondo-Osciloscopio:** 1/9 = 11.1%

La implicación de estos resultados es que, en promedio, cuando el modelo prediga que un objeto es una fuente, lo será en el 33.3% de los casos. Lo mismo para las demás probabilidades de acierto. De esta manera, el objeto mejor entrenado (el que más detectará de forma acertada) será el osciloscopio, pues la matriz sugiere que siempre que haya un osciloscopio, este será detectado y correctamente clasificado.

Por otro lado, la implicación de las probabilidades de error consisten en la confusión de objetos entre sí. En este caso, si el modelo predice que hay una fuente, en el 22.2% de los casos, en realidad será un fondo. Lo mismo ocurre para las demás parejas en donde el primer nombre es el predicho por el modelo y el segundo es el real.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f"{HOME}/runs/detect/train2/confusion_matrix.png", width=600)

"""En segundo lugar, se extraen las gráficas de convergencia de las funciones de pérdida y error. Estas son separadas en los resultados para el conjunto de datos de entrenamiento y el conjunto de validación. Esto debido a que el modelo de YOLOv8 en Roboflow automáticamente separa las 78 imágenes en tres conjuntos: Entrenamiento, Prueba y Validación. Las primeras son para generar el modelo, las segundas para probar que sea correcto y las terceras para calcular métricas de desempeño adecuado.

Se puede apreciar que para el conjunto de entrenamiento, las funciones de pérdida tienden asintóticamente a cero y la función de precisión y recall tienden a converger y estabilizarse. Por otro lado, para el conjunto de validación, lo mismo ocurre con la métrica mAP y con las funciones de pérdida. Sin embargo, para este último conjunto, la convergencia no es suave puesto que hay muchos picos y valles en la evolución de las épocas. Sin embargo, los resultados tienden a ser suficientemente buenos como para que las predicciones sean correctas en su mayoría.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f"{HOME}/runs/detect/train2/results.png", width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=val model={HOME}/runs/detect/train2/weights/best.pt data={dataset.location}/data.yaml

"""A continuación, se usó el modelo para predicción. Se utilizaron los conjuntos de imágenes que el modelo ejecutado generó dentro del entorno de la GPU."""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model={HOME}/runs/detect/train2/weights/best.pt conf=0.25 source={dataset.location}/test/images

import glob
from IPython.display import Image, display

for image_path in glob.glob(f"{HOME}/runs/detect/predict2/*.jpg"):
  display(Image(filename=image_path, width=600))
  print("\n")

"""Se puede apreciar que acierta en la identificación de casi todas las fotos, excepto en dos. En la segunda foto identifica dos generadores en la parte lateral derecha, aunque sólo hay uno. Adicionalmente, en la séptima imagen identifica también dos osciloscopios cuando sólo hay uno. En el siguiente paso, se corre el modelo para los datos de validación."""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model={HOME}/runs/detect/train2/weights/best.pt conf=0.25 source={dataset.location}/valid/images

import glob
from IPython.display import Image, display

for image_path in glob.glob(f"{HOME}/runs/detect/predict3/*.jpg"):
  display(Image(filename=image_path, width=600))
  print("\n")

"""Los resultados son satisfactorios igualmente, salvo por la segunda y cuarta imagen. En la segunda, identifica dos generadores aunque sólo hay uno. En la cuarta, ocurre algo más interesante y es que a un mismo objeto lo cataloga como Multímetro y como Generador. Esto se debe a que en las fotos tomadas para el entrenamiento, se pueden apreciar los cables puestos encima tanto del multímetro como del generador. En consecuencia, al tener una fotografía mayormente superior del instrumento en cuestión, sólo se aprecian los cables por lo cual el modelo se confunde y falla al realizar la predicción. Cabe resaltar, sin embargo, que el modelo arroja que la probabilidad de que sea un multímetro (lo cual es cierto) es 65%, mientras que la probabilidad de que sea un generador es de sólo 40%.

Finalmente, se probó el modelo reentrenado para imágenes que nunca se subieron al servidor de Roboflow. Estas son las 12 fotos que no fueron subidas al modelo (recúerdese que este se generó con 78/90 imágenes en total).
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model={HOME}/runs/detect/train2/weights/best.pt conf=0.25 source={HOME}/new_images

"""Se visualizan las imágenes resultado con los identificadores de clases. Como se puede apreciar, todos los resultados son correctos con excepción de uno, en el cual se identifican 3 osciloscopios cuando sólo hay uno. En particular, en este caso, identifica un fondo como un osciloscopio y confunde el multímetro (que se ve de forma muy limitada en el marco de la foto) con otro osciloscopio."""

new_images_dir = "/content/runs/detect/predict8"

for i in os.listdir(new_images_dir):
  img = image.load_img(new_images_dir + "//" + i)
  plt.imshow(img)
  plt.show()

"""A partir de los tres resultados obtenidos anteriormente, se puede establecer que el reentrenamiento de YOLOv8 fue satisfactorio. De esta manera, es capaz de identificar correctamente una mayoría de las imágenes que ingresan por parámetro. Si bien comete algunos errores como identificar más instrumentos de los que hay o confundir dos que se ven semejantemente desde arriba, en todos los casos probados, menos uno, identifica adecuadamente los instrumentos presentes y correctamente (y con alta probabilidad) el instrumento principal de la foto.

# Punto 3 - PoseCNN
"""